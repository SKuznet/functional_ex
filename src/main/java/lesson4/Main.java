package lesson4;

public class Main {
    // В Java 8 Stream это совсем другое. Streams (стримы/потоки) являются Монадами,
    // которые играют большую роль в обеспечении функционального программирования в Java.
    //
    // В функциональном программировании монада является структурой, которая представляет
    // вычисления в виде последовательности шагов.

    // Операции над потоком относятся либо к промежуточным, либо к терминальным. Все промежуточные операции возвращают
    // поток, так что мы можем объединять несколько промежуточных операций без использования точки с запятой.
    // Терминальные операции возвращают void или непотоковый результат. В приведенном выше примере filter, map и sorted
    // являются промежуточными операциями, тогда как forEach является терминальной операцией. Для получения полного
    // списка всех доступных операций потока смотрите Javadoc по Stream.
    //
    // Большинство операций потока принимают в качестве параметров какие-то лямбда-выражения, в функциональный интерфейс
    // точное поведение по каждой операции. Большинство этих операций должны быть как неинтерферирующими
    // (non-interfering), так и лишенными состояния (stateless). Что это значит?
    //
    // Неинтерферирующуя функция не изменяет основной источник данных потока. Например, в приведенном выше примере
    // лямбда выражение не изменяет mList путем добавления или удаления элементов из коллекции.
    //
    // Лишенная состояния функция — выполнение операции является детерминированным, например, в приведенном выше
    // примере лямбда-выражение не зависит от какой-либо изменяемой переменной или состояния из внешней среды,
    // которая могла бы измениться во время выполнения.
}
